
import org.gradle.plugins.signing.Sign

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin:'application'
apply plugin: 'signing'

group 'com.software-ninja'
version '2.0.1-SNAPSHOT'
mainClassName = "com.software_ninja.malabar.Malabar"

repositories {
  mavenCentral()   
}

configurations {
    ivy
}

dependencies {
  ivy "org.apache.ivy:ivy:2.3.0"
  compile  "org.apache.ivy:ivy:2.3.0"
  testCompile  "org.apache.ivy:ivy:2.3.0"
  compile 'org.codehaus.groovy:groovy-all:2.3.7'
  compile 'org.apache.maven:maven-embedder:3.0.5'
  compile 'org.apache.maven:maven-core:3.0.5'
  compile 'org.apache.maven:maven-compat:3.0.5'
  compile 'org.apache.maven:maven-aether-provider:3.0.5'
  compile 'org.sonatype.aether:aether-connector-wagon:1.13.1'
  compile 'com.jcabi:jcabi-aether:0.10.1'
  compile 'jline:jline:2.11'
  compile 'org.fusesource.jansi:jansi:1.11'

  testCompile 'junit:junit:4.11'
  testCompile 'net.java.quickcheck:quickcheck:0.6'

  // imports below here are grabbed via Grape at runtime
  testCompile 'com.jcabi:jcabi-aether:0.10.1'
  
}

tasks.withType(GroovyCompile) {
    groovyClasspath += configurations.ivy
}

tasks.withType(Test) {
  sourceSets.test.runtimeClasspath += configurations.ivy
}


//
// Deploy to Maven Central 
// Instructions at:
// http://jedicoder.blogspot.com/2011/11/automated-gradle-project-deployment-to.html
//

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}
 
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

signing {
    sign configurations.archives
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java 6's console to read from the console (no good for
        // a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build." +
                       "\n\nPlease enter your signing details.\n\n"

        def password = console.readPassword("PGP Private Key Password: ")

	allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
	  beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	  repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	      authentication(userName: ossrhUsername, password: ossrhPassword)
      	  }

          snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
              authentication(userName: ossrhUsername, password: ossrhPassword)
          } 
 
            pom.project {
               name 'malabar'
               packaging 'jar'
               description 'A Maven-enabled Java mode for Emacs'
               url 'https://github.com/m0smith/malabar-mode-jar'
 
               scm {
                   url 'https://github.com/m0smith/malabar-mode-jar.git'
                   connection 'scm:git:git@github.com:m0smith/malabar-mode-jar.git'
                   developerConnection 'scm:git:git@github.com:m0smith/malabar-mode-jar.git'
               }
 
               licenses {
                   license {
                       name 'The GNU General Public License, Version 2'
                       url 'http://www.gnu.org/licenses/gpl2.txt'
                       distribution 'repo'
                   }
               }
 
               developers {
                   developer {
                       id 'espenhw'
                       name 'Espen Wiborg'
		       email 'http://mailhide.recaptcha.net/d?k=01GFbnCG21M-KIunkjRjxWJw==&amp;c=BsOjYVXpToqQKNHwMd0ZRx5XPNMia6agfhzc3Fwtink='
		       roles {
			 role 'Evil Mastermind'
		       }
                   }
                   developer {
                       id 'dstu'
                       name 'Stu Black'
		       roles {
			 role 'Keeper of the flame'
		       } 
                   }
                   developer {
                       id 'm0smith'
                       name 'Matthew O. Smith'
		       roles {
			 role 'Reanimator'
		       } 
                   }
               }
           }
        }
    }
}




